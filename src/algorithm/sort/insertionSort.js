
/**
 * 插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，
 * 因为只要打过扑克牌的人都应该能够秒懂。插入排序是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，
 * 对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。
 * 插入排序和冒泡排序一样，也有一种优化算法，叫做拆半插入。
 * https://kuangzhenfeng.github.io/sort/3.insertionSort.html
 */

/**
 * 1.将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。
 * 2.从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）
 */

/**
 * 扑克牌思想，从第二位开始
 * j循环到>0也就是1，因为1的位置已经和0比较过了
 * 插入排序和选择排序最大的区别在于可以提前终止循环条件
 * 为什么插入排序要比选择排序慢呢：交换操作比较耗费时间，相当于是三次赋值
 */

/**
 * 优化插入排序
 * 先保存一个副本再用这个副本往前进行比较
 * 如果前面的比后面的大则把前面的元素移动到后面也就是j--
 * 比较到前面的比后面的元素小了直接把元素放在当前应该放置的位置，这个位置可能没变化也可能变化了取决于数据
 * 在就是有序的数组的情况下插入排序的时间复杂度是On
 * on^2
 */

// function insertionSort(arr){
//   for (let i = 0; i < arr.length; i++) {
//     for(let j = i+1; j>0 && arr[j]<arr[j-1]; j--){
//       [arr[j-1],arr[j]] = [arr[j],arr[j-1]]      
//     }    
//   }
//   console.log('insertion arr:',arr);
// }

// export default insertionSort

function insertionSort(arr){
  for (let i = 1; i < arr.length; i++) {
    // 存放需要放置的值
    let e = arr[i]
    // 应该要插入的最终位置
    let j = i
    // j 每次条件满足后就会向前移动一位
    for( j; j>0 && arr[j-1] > e; j--){
      // 如果j前面的值比e大则把前面的值挪到后面 j--
      arr[j] = arr[j-1]
    }    
    // 把e的值存放到应该放入的位置
    arr[j] = e
  }
  console.log('insertion arr:',arr);
}

export default insertionSort